<?php

/**
 * @file
 * Defines the discount and discount offer entities (always managed together),
 * their bundles, and all surrounding functionality (API, UI).
 */

/**
 * Implements hook_entity_info().
 */
function commerce_discount_entity_info() {
  $items['commerce_discount'] = array(
    'label' => t('Commerce Discount'),
    'controller class' => 'EntityAPIControllerExportable',
    'entity class' => 'CommerceDiscount',
    'base table' => 'commerce_discount',
    'fieldable' => TRUE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'discount_id',
      'name' => 'name',
      'label' => 'label',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'module' => 'commerce_discount',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'commerce_discount_access',
    'metadata controller class' => 'CommerceDiscountMetadataController',
    'views controller class' => 'CommerceDiscountViewsController',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/commerce/commerce-discounts',
      'file' => 'includes/commerce_discount.admin.inc',
      'controller class' => 'CommerceDiscountUIController',
    ),
  );
  foreach (commerce_discount_types() as $type => $info) {
    $items['commerce_discount']['bundles'][$type] = array(
      'label' => $info['label'],
    );
  }

  $items['commerce_discount_offer'] = array(
    'label' => t('Commerce Discount Offer'),
    'controller class' => 'EntityAPIControllerExportable',
    'entity class' => 'CommerceDiscountOffer',
    'base table' => 'commerce_discount_offer',
    'fieldable' => TRUE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'discount_offer_id',
      'name' => 'name',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'module' => 'commerce_discount',
    'metadata controller class' => 'EntityDefaultMetadataController',
  );
  foreach (commerce_discount_offer_types() as $type => $info) {
    $items['commerce_discount_offer']['bundles'][$type] = array(
      'label' => $info['label'],
    );
  }

  return $items;
}

/**
 * Implements hook_modules_enabled().
 *
 * Add commerce discount offer reference field.
 *
 * @see hook_install()
 */
function commerce_discount_modules_enabled($modules) {
  foreach ($modules as $module) {
    if ($info = module_invoke($module, 'commerce_discount_type_info'))
    foreach ($info as $type => $value) {
      if (!field_info_instance('commerce_discount', 'commerce_discount_offer', $type)) {
        $instance = array(
          'field_name' => 'commerce_discount_offer',
          'entity_type' => 'commerce_discount',
          'bundle' => $type,
          'label' => t('Discount offer reference'),
          'required' => TRUE,
          'widget' => array(
            'module' => 'inline_entity_form',
            'type' => 'inline_entity_form',
          ),
        );
        field_create_instance($instance);
      }
    }
  }
}


/**
 * Implements hook_permission().
 */
function commerce_discount_permission() {
  $permissions = array();
  $permissions['administer commerce discounts'] = array(
    'title' => t('Administer discounts'),
  );

  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function commerce_discount_views_api($module, $api) {
  if ($module == 'views') {
    return array(
      'version' => 2,
      'path' => drupal_get_path( 'module','commerce_discount') . '/includes/views',
    );
  }
}

/**
 * Implements hook_features_pipe_commerce_discount_alter().
 *
 * Pipe the related Commerce discount order entity.
 */
function commerce_discount_features_pipe_commerce_discount_alter(&$pipe, $data, $export) {
  if (empty($data)) {
    return;
  }

  foreach ($data as $name) {
    $wrapper = entity_metadata_wrapper('commerce_discount', $name);
    $pipe['commerce_discount_offer'][] = $wrapper->commerce_discount_offer->name->value();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the "Commerce discount offer" for the components list of features.
 */
function commerce_discount_form_features_export_form_alter(&$form, $from_state) {
  unset($form['export']['components']['#options']['commerce_discount_offer']);
}

/**
 * Access callback for commerce_discount entities.
 */
function commerce_discount_access($op, $entity, $account, $entity_type) {
  return user_access('administer commerce discounts', $account);
}

/**
 * Implements hook_commerce_discount_type_info().
 */
function commerce_discount_commerce_discount_type_info() {
  $types = array();
  $types['order_discount'] = array(
    'label' => t('Order Discount'),
    'event' => 'commerce_discount_calculate_order_discount',
    'entity type' => 'commerce_order',
  );
  $types['product_discount'] = array(
    'label' => t('Product Discount'),
    'event' => 'commerce_product_calculate_sell_price',
    'entity type' => 'commerce_product',
  );

  return $types;
}

/**
 * Implements hook_commerce_discount_offer_type_info().
 */
function commerce_discount_commerce_discount_offer_type_info() {
  $types = array();
  $types['fixed_amount'] = array(
    'label' => t('$ off'),
    'callback' => 'commerce_discount_fixed_amount_offer_apply',
  );

  $types['percentage'] = array(
    'label' => t('% off'),
    'callback' => 'commerce_discount_percentage_offer_apply',
  );

  return $types;
}

/**
 * Applies the passed-in fixed amount discount offer to the passed-in entity.
 */
function commerce_discount_fixed_amount_offer_apply($entity, $entity_type, CommerceDiscountOffer $discount_offer) {

}

/**
 * Applies the passed-in percentage discount offer to the passed-in entity.
 */
function commerce_discount_percentage_offer_apply($entity, $entity_type, CommerceDiscountOffer $discount_offer) {

}

/**
 * Return an array of all defined discount types.
 *
 * @return
 *   The array of types, keyed by type name.
 */
function commerce_discount_types() {
  $discount_types = &drupal_static(__FUNCTION__);

  if (!isset($discount_types)) {
    $discount_types = array();

    foreach (module_implements('commerce_discount_type_info') as $module) {
      foreach (module_invoke($module, 'commerce_discount_type_info') as $type => $info) {
        $info += array(
          // Remember the providing module.
          'module' => $module,
        );
        $discount_types[$type] = $info;
      }
    }

    // Allow the type info to be altered by other modules.
    drupal_alter('commerce_discount_type_info', $discount_types);
  }

  return $discount_types;
}

/**
 * Loads the data for a specific discount type.
 *
 * @param $discount_type
 *   The machine name of a discount type.
 *
 * @return
 *   The requested array or FALSE if not found.
 */
function commerce_discount_type($discount_type) {
  $discount_types = commerce_discount_types();

  return isset($discount_types[$discount_type]) ? $discount_types[$discount_type] : FALSE;
}

/**
 * Returns the human readable name of any or all discount types.
 *
 * @param $type
 *   Optional parameter specifying the type whose name to return.
 *
 * @return
 *   Either an array of all discount type names keyed by the machine name or a
 *     string containing the human readable name for the specified type. If a
 *     type is specified that does not exist, this function returns FALSE.
 */
function commerce_discount_type_get_name($type = NULL) {
  $discount_types = commerce_discount_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($discount_types[$type])) {
      return $discount_types[$type]['label'];
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($discount_types as $key => $value) {
    $discount_types[$key] = $value['label'];
  }

  return $discount_types;
}

/**
 * Return an array of all defined discount offer types.
 *
 * @return
 *   The array of types, keyed by type name.
 */
function commerce_discount_offer_types() {
  $offer_types = &drupal_static(__FUNCTION__);

  if (!isset($offer_types)) {
    $offer_types = array();

    foreach (module_implements('commerce_discount_offer_type_info') as $module) {
      foreach (module_invoke($module, 'commerce_discount_offer_type_info') as $type => $info) {
        $info += array(
          // Remember the providing module.
          'module' => $module,
        );
        $discount_types[$type] = $info;
      }
    }

    // Allow the type info to be altered by other modules.
    drupal_alter('commerce_discount_offer_type_info', $offer_types);
  }

  return $offer_types;
}

/**
 * Loads the data for a specific discount offer type.
 *
 * @param $offer_type
 *   The machine name of an offer type.
 *
 * @return
 *   The requested array or FALSE if not found.
 */
function commerce_discount_offer_type($offer_type) {
  $offer_types = commerce_discount_offer_types();

  return isset($offer_types[$offer_type]) ? $offer_types[$offer_type] : FALSE;
}

/**
 * Returns the human readable name of any or all discount offer types.
 *
 * @param $type
 *   Optional parameter specifying the offer type whose name to return.
 *
 * @return
 *   Either an array of all discount offer type names keyed by the machine name
 *   or a string containing the human readable name for the specified type.
 *   If a type is specified that does not exist, this function returns FALSE.
 */
function commerce_discount_offer_type_get_name($type = NULL) {
  $offer_types = commerce_discount_offer_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($offer_types[$type])) {
      return $offer_types[$type]['label'];
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($offer_types as $key => $value) {
    $offer_types[$key] = $value['label'];
  }

  return $offer_types;
}

/**
 * Load a single commerce discount entity.
 *
 * @return
 *   Entity of CommerceDiscount type, or FALSE is none found.
 */
function commerce_discount_load($discount_id) {
  return entity_load_single('commerce_discount', $discount_id);
}
